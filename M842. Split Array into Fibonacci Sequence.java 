class Solution {
    public List<Integer> splitIntoFibonacci(String S) {
        List<Integer> res = new ArrayList();
        for (int i = 1; i <= S.length()/2; i++) {
            if (S.charAt(0) == '0' && i >= 2 || i>=11) continue;
            for (int j = i+1; Math.max(i,j-i) <= S.length()-j; j++) {
                res = new ArrayList();
                if ((S.charAt(i) == '0' && j-i >= 2) || j-i >= 11) continue;
                long num1 = Long.parseLong(S.substring(0, i));
                if (num1 >= Integer.MAX_VALUE) continue;
                // System.out.println(S.substring(i, j));
                long num2 = Long.parseLong(S.substring(i, j));
                if (num2 >= Integer.MAX_VALUE) continue;
                res.add((int)num1); res.add((int)num2);
                if (helper(num1, num2, S.substring(j), res)) return res;
            }
        }
        return new ArrayList();
    }
    public boolean helper(long num1, long num2, String s, List<Integer> list) {
        if (s.length() == 0) return true;
        long sum = num1+num2;
        if (sum >= Integer.MAX_VALUE) return false;
        String prefix = Long.toString(sum);
        if (!s.startsWith(prefix)) return false;
        list.add((int)sum);
        return helper(num2, sum, s.substring(prefix.length()),list);
    }
}