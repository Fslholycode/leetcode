class Solution {
    int res = 0;
    public int reversePairs(int[] nums) {
        // System.out.println(Integer.MAX_VALUE- nums[0]);
        mergesort(nums, 0, nums.length-1);
        return res;
    }
    public void mergesort(int[] nums, int start, int end) {
        if (start >= end) return;
        int mid = start + (end-start)/2;
        // System.out.println(start+" "+end);
        mergesort(nums, start, mid);
        mergesort(nums, mid+1, end);
        
        int l = start, r = mid+1;
        int[] temp = new int[end-start+1];
        int count = 0;
        while (l <= mid) {
            if (r > end || (long)(nums[l]) <= (long)(2*(long)nums[r])) {
                l++;
                res += count;
            } else {
                r++;
                count++;
            }
        } 
        int index = 0, left = start, right = mid+1;
        for (; left <= mid || right <= end;) {
            if (left <= mid && (right > end || nums[left] <= nums[right])) {
                temp[index++] = nums[left++];
            } else {
                temp[index++] = nums[right++];
            }
        }
        while (right <= end) {
            temp[index++] = nums[right++];
        }

        while (left <= mid) {
            temp[index++] = nums[left++];
        }
        for (int i = start; i <= end; i++) {
            nums[i] = temp[i-start];
        }
        return;
    }
}