class Solution {
    int[][] dirs = new int[][]{{-1,2},{-2,1},{-2,-1},{-1,-2},{1,2},{2,1},{2,-1},{1,-2}};
    public double knightProbability(int N, int K, int r, int c) {
        double dp0[][] = new double[N][N];
        for(double[] row : dp0) Arrays.fill(row, 1);
        for (int i = 0; i < K; i++) {
            double dp1[][] = new double[N][N];
            for (int m = 0; m < N; m++) {
                for (int n = 0; n < N; n++) {
                    for (int[] dir:dirs) {
                        int newx = m-dir[0];
                        int newy = n-dir[1];
                        if (newx >= 0 && newx < N && newy >= 0 && newy < N) dp1[m][n] += dp0[newx][newy];
                    }
                }
            }
            dp0 = dp1;
        }
        return dp0[r][c]/Math.pow(8, K);
    }
}